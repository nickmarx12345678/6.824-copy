package main

import (
	"fmt"
	"mapreduce"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// TODO: you should complete this to do the inverted index challenge
	// Split text value by non-letter runes to get words.
	f := func(c rune) bool {
		return !unicode.IsLetter(c)
	}
	words := strings.FieldsFunc(value, f)
	// Iterate through each word.
	// Add word and document name into KeyValue instance.
	keyValues := make([]mapreduce.KeyValue, 0)
	for i := 0; i < len(words); i++ {
		keyValues = append(keyValues, mapreduce.KeyValue{words[i], document})
	}
	return keyValues
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// TODO: you should complete this to do the inverted index challenge
	// Create a map of document string to bool values for deduping document strings.
	documentMap := make(map[string]bool)
	for i := 0; i < len(values); i++ {
		documentMap[values[i]] = true
	}
	documents := make([]string, 0)
	for document, _ := range documentMap {
		documents = append(documents, document)
	}
	// Sort the documents in increasing order.
	sort.Strings(documents)
	// Generate the string value of the reduce output.
	output := ""
	for i := 0; i < len(documents); i++ {
		if i > 0 {
			output += ","
		}
		output += documents[i]
	}
	output = strconv.Itoa(len(documents)) + " " + output
	return output
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
